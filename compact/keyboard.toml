[keyboard]
name = "compact"
product_name = "compact"
vendor_id = 0x4c4b
product_id = 0x4643
manufacturer = "rmk"
chip = "rp2040"

[matrix]
# Input and output pins are mandatory
input_pins = ["PIN_2", "PIN_3", "PIN_4", "PIN_5", "PIN_6"]
output_pins = ["PIN_16", "PIN_17", "PIN_18", "PIN_19", "PIN_20", "PIN_21", "PIN_7", "PIN_8", "PIN_9", "PIN_10", "PIN_11", "PIN_12", "PIN_13", "PIN_14", "PIN_15"]
# row2col = false

[aliases]
"~"="WM(Grave, LShift)"
"`"="Grave"
"!"="WM(Kc1, LShift)"
"@"="WM(Kc2, LShift)"
"#"="WM(Kc3, LShift)"
"$"="WM(Kc4, LShift)"
"%"="WM(Kc5, LShift)"
"^"="WM(Kc6, LShift)"
"&"="WM(Kc7, LShift)"
"*"="WM(Kc8, LShift)"
"("="WM(Kc9, LShift)"
")"="WM(Kc0, LShift)"
"-"="Minus"
"_"="WM(Minus, LShift)"
"="="Equal"
"+"="WM(Equal, LShift)"
"["="LeftBracket"
"{"="WM(LeftBracket, LShift)"
"]"="RightBracket"
"}"="WM(RightBracket, LShift)"
"\\"="Backslash"
"|"="WM(Backslash, LShift)"
";"="Semicolon"
":"="WM(Semicolon, LShift)"
"'"="Quote"
"\""="WM(Quote, LShift)"
","="Comma"
"<"="WM(Comma, LShift)"
"."="Dot"
">"="WM(Dot, LShift)"
"/"="Slash"
"?"="WM(Slash, LShift)"

"h~"="WM(Kc1, RAlt)"
"h`"="WM(Kc7, RAlt)"
"h!"="WM(Kc4, LShift)"
"h@"="WM(V, RAlt)"
"h#"="WM(X, RAlt)"
"h$"="WM(Semicolon, RAlt)"
"h%"="WM(Kc5, LShift)"
"h^"="WM(Kc3, RAlt)"
"h&"="WM(C, RAlt)"
"h*"="WM(Slash, RAlt)"
"h("="WM(Kc8, LShift)"
"h)"="WM(Kc9, LShift)"
"h-"="Slash"
"h_"="WM(Slash, LShift)"
"h="="WM(Kc7, LShift)"
"h+"="WM(Kc3, LShift)"
"h["="WM(F, RAlt)"
"h{"="WM(B, RAlt)"
"h]"="WM(G, RAlt)"
"h}"="WM(N, RAlt)"
"h\\"="WM(Q, RAlt)"
"h|"="WM(W, RAlt)"
"h;"="WM(Comma, RAlt)"
"h:"="WM(Dot, LShift)"
"h'"="WM(Kc1, LShift)"
"h\""="WM(Kc2, LShift)"
"h,"="Comma"
"h<"="WM(NonusBackslash, RAlt)"
"h."="Dot"
"h>"="WM(Y, RAlt)"
"h/"="WM(Kc6, LShift)"
"h?"="WM(Comma, LShift)"

"í"="Grave"
"ö"="Kc0"
"ü"="Minus"
"ó"="Equal" 
"ő"="LeftBracket"
"ú"="RightBracket"
"ű"="Backslash"
"é"="Semicolon"
"á"="Quote"

Kk="LT(sym,K)"
Ii="LT(sym,I)"
Kkh="LT(hsym,K)"
Iih="LT(hsym,I)"

cut="WM(X, LCtrl)"
copy="WM(C, LCtrl)"
paste="WM(V, LCtrl)"
find="WM(F, LCtrl)"
replace="WM(H, LCtrl)"
undo="WM(Z, LCtrl)"
redo="WM(Y, LCtrl)"
all="WM(A, LCtrl)"

lock="WM(L, LGui)"
run="WM(R, LGui)"

pair="WM(RightBracket, LCtrl)"
save="WM(S, LCtrl)"
ctab="WM(Tab, LCtrl)"
cbsp="WM(Backspace, LCtrl)"
cent="WM(Enter, LCtrl)"
ck="WM(K, LCtrl)"
cw="WM(W, LCtrl)"
comment="WM(Slash, LCtrl)"

[layout]
rows = 5
cols = 15
layers = 9
matrix_map = """
    (0, 0)  (0, 1)  (0, 2)  (0, 3)  (0, 4)  (0, 5)    (0, 6)  (0, 7)  (0, 8)  (0, 9)  (0, 10) (0, 11) (3, 14) (0, 12)  (0, 13)  (0, 14)
(1, 0)     (1, 1)  (1, 2)  (1, 3)  (1, 4)  (1, 5)      (1, 6)  (1, 7)  (1, 8)  (1, 9)  (1, 10)     (1, 11)    (1, 12)  (1, 13)  (1, 14) 
(2, 0)    (2, 1)  (2, 2)  (2, 3)  (2, 4)  (2, 5)        (2, 6)  (2, 7)  (2, 8)  (2, 9)  (2, 10)    (2, 11)
(3, 0)   (3, 1)  (3, 2)  (3, 3)  (3, 4)  (3, 5)          (3, 6)  (3, 7)  (3, 8)  (3, 9)  (3, 10)   (3, 11)             (3, 13)
(4, 0)  (4, 1)  (4, 2)  (4, 3)  (4, 4)  (4, 5)            (4, 6)  (4, 7)  (4, 8)  (4, 9)  (4, 10)  (4, 11)    (4, 12)  (4, 13)  (4, 14)
"""

[[layer]]
name = "qwerty" #0
keys = """
     Esc  F1  F2  F3  F4  F5                   F6  F7  F8  F9  F10      F11 F12  Insert   Home   PageUp
Tab       Q   W   E   R   T                    Y   U   I   O   P      Backspace  Delete   End    PageDown
OSL(sym)  A   S   D   F   G                    H   J   K   L   @;         Enter
LShift    Z   X   C   V   B                    N   M   @,  @.  @/        RShift           UP
LCtrl  LGui LAlt Delete Space Tab     Enter Space Backspace RAlt OSL(sym) RCtrl  Left     Down   Right
"""

[[layer]]
name = "hqwerty" #1
keys = """
         Esc  F1  F2  F3  F4  F5                   F6    F7    F8    F9    F10   F11 F12    Insert   Home   PageUp
Tab       Q     W   TD(1) R   T                    TD(6) TD(4) TD(2) TD(3) TD(5) Backspace  Delete   End    PageDown
OSL(hsym) TD(0) S   D     F   G                    H     J     K     L     @;    Enter
LShift    Z     X   C     V   B                    N     M     @,    @.    @/    RShift              UP
LCtrl  LGui LAlt Delete Space Tab           Enter Space Backspace RAlt OSL(hsym) RCtrl      Left     Down   Right
"""

[[layer]]
name = "sym" #2
keys = """
Escape     Kc1 Kc2 Kc3 Kc4 Kc5          Kc6 Kc7 Kc8 Kc9 Kc0 TO(qwerty) TO(hqwerty)   Kp7   Kp8   Kp9
Tab        @` @^  @&  @|   @~           @!  @'  @{  @}   @*   Backspace              Kp4   Kp5   Kp6
TO(qwerty) @_  @<  @=  @>  @\\          @-  @"  @(  @)   @/       Enter
LShift     @@  @#  @$  @%  @*           @?  @:  @[  @]   @+      RShift                    Kp0
LCtrl      LGui LAlt Delete Space Tab   Enter Space Backspace RAlt TO(qwerty) RCtrl  Kp1   Kp2   Kp3
"""

[[layer]]
name = "hsym" #3
keys = """
Escape      Kc1 Kc2 Kc3 Kc4 Kc5             Kc6  Kc7 Kc8 Kc9 Kp0 TO(qwerty) TO(hqwerty)   Kp7   Kp8   Kp9
Tab         @h`  @h^  @h&  @h|  @h~         @h!  @h'  @h{  @h}   @h* Backspace            Kp4   Kp5   Kp6
TO(hqwerty) @h_  @h<  @h=  @h>  @h\\        @h-  @h"  @h(  @h)   @h/     Enter
LShift      @h@  @h#  @h$  @h%  @h*         @h?  @h:  @h[  @h]   @h+    RShift                  Kp0
LCtrl       LGui LAlt Delete Space Tab      Enter Space Backspace RAlt TO(hqwerty) RCtrl  Kp1   Kp2   Kp3
"""


# [[layer]]
# name = "my" #0
# keys = """
#       Esc F2  F3  F4  F5  F6           F7  F8  F9  F10 F11 OSL(scuts) Backspace  Insert   Home   PageUp
# Tab       F1  Y   M   R   B            W   C   O   U   F12     Backspace         Delete   End    PageDown
# OSL(sym)  G   S   T   L   V            J   N   A   E   @;      Enter
# LShift    @Kk D   P   H   Q            X   Z   @,  @/  @Ii     RShift                     UP
# LCtrl     F LAlt OSL(med) Space Tab  Enter Backspace OSL(med) RAlt @. RCtrl      Left     Down   Right
# """

# [[layer]]
# name = "hun" #1  Esc @ű  @ú  @í  @ó  @á  @ö  @ü  @ő 
# keys = """
#       Esc F2  F3  F4  F5  F6           F7  F8  F9  F10 F11 OSL(scuts) Backspace  Insert   Home   PageUp
# Tab       F1  Y   M   R   B            W   C   O   U   F12     Backspace         Delete   End    PageDown
# OSL(hsym) G   S   T   L   V            J   N   A   E   @é      Enter
# LShift   @Kkh D   P   H   Q            X   Z   @,  @á  @Iih    RShift                     UP
# LCtrl     F LAlt OSL(med) Space Tab  Enter Backspace OSL(med) RAlt @. RCtrl      Left     Down   Right
# """

# [[layer]]
# name = "med" #4
# keys = """
#         Kc1 Kc2 Kc3 Kc4 Kc5 Kc6                       Kc7 Kc8 Kc9 Kp0 @h-  @h= Backspace  WwwForward      BrightnessUp    AudioVolUp
# Tab     TO(qwerty) TO(qwerty) _ _ AudioMute           @ű   @ő   @ó   @ú    @h* Backspace  WwwBack         BrightnessDown  AudioVolDown
# LGui    @all  @save @lock @find  @replace             @ü   @ö   @á   @é    @í     Enter
# LShift  @undo @cut  @copy @paste @redo                @h?  @h:  @h[  @h]   @í     RShift                  MouseWheelUp
# LCtrl   LGui  LAlt Esc Space Tab               Enter Backspace Delete RAlt @h+    RCtrl  MouseWheelLeft  MouseWheelDown  MouseWheelRight
# """

# [[layer]]
# name = "scuts" #6
# keys = """
# WM(Esc, LCtrl) F1           NumLock      AudioMute      AudioVolDown     AudioVolUp          BrightnessUp   BrightnessUp  DF(my) DF(hun) DF(qwerty) WM(PrintScreen, LCtrl) WM(Pause, LCtrl)      WM(Insert, LCtrl) WM(Home, LCtrl) WM(PageUp, LCtrl)  
# WM(Tab, LCtrl) WM(Q, LCtrl) WM(W, LCtrl) WM(E, LCtrl)   @run             WM(T, LCtrl)        WM(Y, LCtrl)     WM(U, LCtrl)     WM(I, LCtrl)      WM(O, LCtrl)  WM(P, LCtrl)  WM(Backspace, LCtrl)  WM(Delete, LCtrl) WM(End, LCtrl)  WM(PageDown, LCtrl)
# CapsLock       WM(A, LCtrl) WM(S, LCtrl) WM(D, LCtrl)   WM(F, LCtrl)     WM(G, LCtrl)        WM(H, LCtrl)     WM(J, LCtrl)     WM(K, LCtrl)      @lock         @pair         WM(Enter, LCtrl)
# LShift         WM(Z, LCtrl) WM(X, LCtrl) WM(C, LCtrl)   WM(V, LCtrl)     WM(B, LCtrl)        WM(N, LCtrl)     WM(M, LCtrl)     WwwBack           WwwForward    @comment      RShift                                  MouseWheelUp
# LCtrl          LGui         LAlt         WM(Esc, LCtrl) WM(Space, LCtrl) WM(Tab, LCtrl)      WM(Enter, LCtrl) WM(Space, LCtrl) WM(Delete, LCtrl) RAlt          RGui          RCtrl                 MouseWheelLeft    MouseWheelDown  MouseWheelRight
# """

# [[layer]]
# name = "media" #2
# keys = """
# _ _ AudioVolDown AudioVolUp AudioMute MediaStop MediaPrevTrack MediaPlayPause MediaNextTrack Mail WwwHome MyComputer Calculator     TG(hun) TG(media) TG(empty)
# User0 _ _ _ _ _ _ _ _ _ User1 User2 User3 _      WwwForward BrightnessUp   AudioVolUp           MouseBtn1      MouseBtn3 MouseBtn2       WwwHome
# _ _ _ _ _ _ _ _ _ _ _ User4 User5 User6          WwwBack    BrightnessDown AudioVolDown         WwwBack        MouseUp   WwwForward      MouseWheelUp
# CapsLock _ _ _ _ _ _ _ _ _ User7 User8 _                                                        MouseLeft      MouseDown MouseRight
# _   _ _ _ _ _ _ _ _ _ _   _                                 MouseWheelUp                        MouseWheelLeft MouseDown MouseWheelRight MouseWheelDown
# _ _ _     _     LAlt _ _ _                   MouseWheelLeft MouseWheelDown MouseWheelRight           MouseBtn1       MouseBtn2 
# """

[rmk]
# Mouse key interval (ms) - controls mouse movement speed
mouse_key_interval = 20
# Mouse wheel interval (ms) - controls scrolling speed
mouse_wheel_interval = 80
# Maximum number of combos keyboard can store
combo_max_num = 8
# Maximum number of keys pressed simultaneously in a combo
combo_max_length = 3
# Maximum number of forks for conditional key actions
fork_max_num = 4
# Maximum number of tap dances
tap_dance_max_num = 8
# Maximum number of taps in a tap dance 
tap_dance_max_tap = 2
# Macro space size in bytes for storing sequences. The maximum number of Macros depends on the size of each sequence: All sequences combined need to fit into macro_space_size, the number of macro sequences doesn't matter.
macro_space_size = 256
# Default debounce time in ms
debounce_time = 20
# Event channel size
event_channel_size = 20
# Report channel size
report_channel_size = 20
# Vial channel size
vial_channel_size = 8
# Flash channel size
flash_channel_size = 8
# The number of the split peripherals
split_peripherals_num = 1
# The size of the split message channel
split_message_channel_size = 6
# The number of available BLE profiles
ble_profiles_num = 3

[light]
# All light pins are high-active by default, uncomment if you want it to be low-active
numslock.pin = "PIN_27"
numslock.low_active = true
capslock.pin = "PIN_28"
capslock.low_active = true
scrolllock.pin = "PIN_25"
scrolllock.low_active = false

[storage]
# Storage feature is enabled by default
# enabled = true
# clear_storage = true

[behavior.combo]
timeout = "150ms"
combos = [
  { actions = ["Escape", "Tab"], output = "Macro0" }
]

[behavior]
tap_hold = { enable_hrm = true, permissive_hold = true, chordal_hold = true }

[behavior.fork]
forks = [
#   { trigger = "V", negative_output = "V", positive_output = "X", match_any = "NumLock|CapsLock|ScrollLock", bind = "false" },#does not work
#   { trigger = "X", negative_output = "X", positive_output = "V", match_any = "NumLock|CapsLock|ScrollLock", bind = "false" },#does not work
#   { trigger = "M", negative_output = "M", positive_output = "N", match_any = "MouseBtn5", bind = "false" },
#   { trigger = "N", negative_output = "N", positive_output = "M", match_any = "MouseBtn5", bind = "false" },
]

[behavior.tap_dance]
tap_dances = [
  { tap = "A", hold = "Quote"}, #a á
  { tap = "E", hold = "Semicolon"}, #e é
  { tap = "I", hold = "Grave"}, #i í
  { tap = "O", hold = "Equal", double_tap = "Kc0", hold_after_tap = "LeftBracket"}, #o ó ö ő  
  { tap = "U", hold = "RightBracket", double_tap = "Minus", hold_after_tap = "BackSlash"},#u ú ü ű
  { tap = "P", hold = "LeftBracket" }, #p ő   
  { tap = "Y", hold = "Backslash"}, #y ű  
]